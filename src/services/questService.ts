import { authAxiosInstance } from './axiosInstance';
import { API_CONFIG } from '../config/apiConfig';

// ============================================
// QUEST TYPES & INTERFACES
// ============================================

export interface QuestItem {
  Code: string;
  Title: string;
  Reward: number;
  Done: boolean;
}

export interface QuestTodayResponse {
  Points: number;
  Quests: QuestItem[];
}

export interface QuestCompletionResponse {
  success: boolean;
  message: string;
}

// ============================================
// QUEST SERVICE
// ============================================

export class QuestService {
  // Get today's quests and current points
  static async getTodayQuests(): Promise<QuestTodayResponse> {
    try {
      console.log('üîÑ Fetching today\'s quests...');
      const response = await authAxiosInstance.get<QuestTodayResponse>(API_CONFIG.ENDPOINTS.QUESTS.TODAY);
      console.log('‚úÖ Today\'s quests fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error fetching today\'s quests:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch quests');
    }
  }

  // Complete check-in quest (+5 points)
  static async completeCheckIn(): Promise<QuestCompletionResponse> {
    try {
      console.log('üîÑ Completing check-in quest...');
      const response = await authAxiosInstance.post(API_CONFIG.ENDPOINTS.QUESTS.CHECK_IN);
      console.log('‚úÖ Check-in quest completed:', response.status);
      return {
        success: true,
        message: 'Check-in th√†nh c√¥ng! +5 ƒëi·ªÉm'
      };
    } catch (error: any) {
      console.error('‚ùå Error completing check-in quest:', error);
      
      // Handle idempotent error (already completed today)
      if (error.response?.status === 400) {
        return {
          success: false,
          message: 'B·∫°n ƒë√£ check-in h√¥m nay r·ªìi!'
        };
      }
      
      throw new Error('Kh√¥ng th·ªÉ ho√†n th√†nh quest check-in');
    }
  }

  // Mark join room quest (+5 points)
  static async markJoinRoom(roomId: string): Promise<QuestCompletionResponse> {
    try {
      console.log(`üîÑ Marking join room quest for room ${roomId}...`);
      const response = await authAxiosInstance.post(API_CONFIG.ENDPOINTS.QUESTS.JOIN_ROOM(roomId));
      console.log('‚úÖ Join room quest completed:', response.status);
      return {
        success: true,
        message: 'Quest tham gia ph√≤ng ho√†n th√†nh! +5 ƒëi·ªÉm'
      };
    } catch (error: any) {
      console.error(`‚ùå Error completing join room quest for room ${roomId}:`, error);
      
      // Handle idempotent error (already completed today)
      if (error.response?.status === 400) {
        return {
          success: false,
          message: 'B·∫°n ƒë√£ ho√†n th√†nh quest tham gia ph√≤ng h√¥m nay!'
        };
      }
      
      throw new Error('Kh√¥ng th·ªÉ ho√†n th√†nh quest tham gia ph√≤ng');
    }
  }

  // Mark attend event quest (+20 points)
  static async markAttendEvent(eventId: string): Promise<QuestCompletionResponse> {
    try {
      console.log(`üîÑ Marking attend event quest for event ${eventId}...`);
      const response = await authAxiosInstance.post(API_CONFIG.ENDPOINTS.QUESTS.ATTEND_EVENT(eventId));
      console.log('‚úÖ Attend event quest completed:', response.status);
      return {
        success: true,
        message: 'Quest tham gia s·ª± ki·ªán ho√†n th√†nh! +20 ƒëi·ªÉm'
      };
    } catch (error: any) {
      console.error(`‚ùå Error completing attend event quest for event ${eventId}:`, error);
      
      // Handle idempotent error (already completed today)
      if (error.response?.status === 400) {
        return {
          success: false,
          message: 'B·∫°n ƒë√£ ho√†n th√†nh quest tham gia s·ª± ki·ªán h√¥m nay!'
        };
      }
      
      throw new Error('Kh√¥ng th·ªÉ ho√†n th√†nh quest tham gia s·ª± ki·ªán');
    }
  }

  // Get quest icon based on quest code
  static getQuestIcon(code: string): string {
    switch (code) {
      case 'CHECK_IN_DAILY':
        return 'üìÖ';
      case 'JOIN_ANY_ROOM':
        return 'üí¨';
      case 'INVITE_ACCEPTED':
        return 'üë•';
      case 'ATTEND_EVENT':
        return 'üéâ';
      default:
        return 'üéØ';
    }
  }

  // Get quest color based on quest code
  static getQuestColor(code: string): string {
    switch (code) {
      case 'CHECK_IN_DAILY':
        return 'from-blue-500 to-cyan-600';
      case 'JOIN_ANY_ROOM':
        return 'from-green-500 to-emerald-600';
      case 'INVITE_ACCEPTED':
        return 'from-purple-500 to-pink-600';
      case 'ATTEND_EVENT':
        return 'from-orange-500 to-red-600';
      default:
        return 'from-gray-500 to-gray-600';
    }
  }

  // Get quest description based on quest code
  static getQuestDescription(code: string): string {
    switch (code) {
      case 'CHECK_IN_DAILY':
        return 'ƒêƒÉng nh·∫≠p v√† check-in h√†ng ng√†y ƒë·ªÉ nh·∫≠n ƒëi·ªÉm th∆∞·ªüng';
      case 'JOIN_ANY_ROOM':
        return 'Tham gia b·∫•t k·ª≥ ph√≤ng chat n√†o ƒë·ªÉ k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng';
      case 'INVITE_ACCEPTED':
        return 'C√≥ ng∆∞·ªùi ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n c·ªßa b·∫°n';
      case 'ATTEND_EVENT':
        return 'Tham gia v√† ƒëi·ªÉm danh t·∫°i c√°c s·ª± ki·ªán c·ªßa c·ªông ƒë·ªìng';
      default:
        return 'Ho√†n th√†nh nhi·ªám v·ª• ƒë·ªÉ nh·∫≠n ƒëi·ªÉm th∆∞·ªüng';
    }
  }

  // Get quest type based on quest code
  static getQuestType(code: string): string {
    switch (code) {
      case 'CHECK_IN_DAILY':
        return 'Daily';
      case 'JOIN_ANY_ROOM':
        return 'Social';
      case 'INVITE_ACCEPTED':
        return 'Social';
      case 'ATTEND_EVENT':
        return 'Event';
      default:
        return 'General';
    }
  }
}

export default QuestService;

